package pt.tecnico.grpc.server;

/* these imported classes are generated by the hello-world-server contract */
import pt.tecnico.grpc.Daoliberate;
import pt.tecnico.grpc.DaoliberateServiceGrpc;

import io.grpc.stub.StreamObserver;

import java.util.List;
import java.util.ArrayList;

public class DaoliberateServiceImpl extends DaoliberateServiceGrpc.DaoliberateServiceImplBase {

	private Database data_base;
	private DaoliberateLibrary library;

	public DaoliberateServiceImpl(Database data_base, String register_host, int register_port) throws Exception {
		this.data_base = data_base;
		this.library = new DaoliberateLibrary(data_base, register_host, register_port);
	}

	@Override
	public void ping(Daoliberate.PingRequest request, StreamObserver<Daoliberate.PingResponse> responseObserver) {

		// PingRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.PingResponse response = Daoliberate.PingResponse.newBuilder()
				.setMessage("Chat server is up!").build();

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void createRoom(Daoliberate.CreateRoomRequest request, StreamObserver<Daoliberate.CreateRoomResponse> responseObserver) {

		// CreateRoomRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.CreateRoomResponse response;

		ArrayList<String> initial_secrets = new ArrayList<String>();
		for(int i = 0; i < request.getInitialSecretsCount(); i++) {
			initial_secrets.add(request.getInitialSecrets(i));
		}
		int room_id = this.data_base.createRoom(request.getRoomName(), initial_secrets);
		response = Daoliberate.CreateRoomResponse.newBuilder().setRoomId(room_id).build();
		System.out.println("CREATEROOM");

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void ingressRoom(Daoliberate.IngressRoomRequest request, StreamObserver<Daoliberate.IngressRoomResponse> responseObserver) {

		// IngressRoomRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.IngressRoomResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.IngressRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.availableTickets(request.getRoomId())) {
			response = Daoliberate.IngressRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.ACCESS_ROOM_DENIED).build();
			System.out.println("ACCESS_ROOM_DENIED");
		}
		else if(!this.data_base.checkIngress(request.getRoomId(), request.getInitialSecret())) {
			response = Daoliberate.IngressRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_TICKET).build();
			System.out.println("WRONG_TICKET");
		}
		else if(this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.IngressRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.NAME_EXISTS).build();
			System.out.println("NAME_EXISTS");
		}
		else if(this.data_base.useIngress(request.getRoomId(), request.getInitialSecret(), request.getPseudonym(), request.getPassword())) {
			response = Daoliberate.IngressRoomResponse.newBuilder()
						.setStatus(Daoliberate.STATUS.OK)
						.setRoomName(this.data_base.getRoomNameById(request.getRoomId()))
						.build();
			System.out.println("OK");
		}
		else {
			response = Daoliberate.IngressRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.ERROR).build();
			System.out.println("ERROR");
		}


		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void enterRoom(Daoliberate.EnterRoomRequest request, StreamObserver<Daoliberate.EnterRoomResponse> responseObserver) {

		// EnterRoomRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.EnterRoomResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.EnterRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.EnterRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.EnterRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.deletedUser(request.getPseudonym(), request.getRoomId())) {
			response = Daoliberate.EnterRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else {
			List<String> channel_names = new ArrayList<String>();
			for(String channel_name : this.data_base.getChannelsOfRoom(request.getRoomId())) {
				channel_names.add(channel_name);
			}
			response = Daoliberate.EnterRoomResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.setRoomName(this.data_base.getRoomNameById(request.getRoomId()))
						.addAllChannelNames(channel_names)
						.setReputation(this.data_base.getUser(request.getRoomId(), request.getPseudonym()).getReputation())
						.build();
			System.out.println("ENTER_ROOM");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void enterChannel(Daoliberate.EnterChannelRequest request, StreamObserver<Daoliberate.EnterChannelResponse> responseObserver) {

		// EnterChannelRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.EnterChannelResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.deletedUser(request.getPseudonym(), request.getRoomId())) {
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else {
			List<Daoliberate.Message> messages = new ArrayList<Daoliberate.Message>();
			for(Message message : this.data_base.getMessagesOfRoom(request.getRoomId(), request.getChannelName())) {
				Daoliberate.Message message_proto;
				if(message.getEditor() != null){
					message_proto = Daoliberate.Message.newBuilder()
						.setMessageId(message.getId())
						.setOwnerPseudonym(message.getOwner().getName())
						.setEditorPseudonym(message.getEditor().getName())
						.setContent(message.getContent())
						.build();
				}
				else{
					message_proto = Daoliberate.Message.newBuilder()
						.setMessageId(message.getId())
						.setOwnerPseudonym(message.getOwner().getName())
						.setEditorPseudonym("")
						.setContent(message.getContent())
						.build();
				}
				messages.add(message_proto);
			}
			response = Daoliberate.EnterChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.addAllMessages(messages)
						.build();
			System.out.println("ENTER_CHANNEL");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void createMessage(Daoliberate.CreateMessageRequest request, StreamObserver<Daoliberate.CreateMessageResponse> responseObserver) {

		// CreateMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.CreateMessageResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else {
			this.data_base.addMessageToChat(request.getRoomId(), request.getChannelName(), request.getPseudonym(), request.getContent());
			response = Daoliberate.CreateMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("CREATEMESSAGE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void inviteUser(Daoliberate.InviteUserRequest request, StreamObserver<Daoliberate.InviteUserResponse> responseObserver) {

		// CreateMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.InviteUserResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.InviteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.InviteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.InviteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.InviteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else {
			Daoliberate.STATUS reg_response = this.library.preInviteUser(request.getRoomId(), request.getName());
			if(reg_response == Daoliberate.STATUS.OK && this.data_base.numberParticipantsRoom(request.getRoomId()) > 1) {
				EqualVote vote = new VoteInviteUser(this.data_base.getRoom(request.getRoomId()), this.library, this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getName());
				int vote_id = this.data_base.createEqualVote(request.getRoomId(), vote);
				this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
				response = Daoliberate.InviteUserResponse
					.newBuilder()
					.setStatus(Daoliberate.STATUS.VOTE)
					.setVoteId(vote_id)
					.build();
			}
			else if(reg_response == Daoliberate.STATUS.OK && this.data_base.numberParticipantsRoom(request.getRoomId()) == 1) {
				String reg_inv_response = this.library.inviteUser(request.getRoomId(), request.getName());
				this.data_base.logOnHistoryInviteUser(request.getRoomId(), request.getName(), request.getPseudonym(), reg_inv_response);
				response = Daoliberate.InviteUserResponse
					.newBuilder()
					.setStatus(Daoliberate.STATUS.OK)
					.build();
			}
			else {
				response = Daoliberate.InviteUserResponse
					.newBuilder()
					.setStatus(reg_response)
					.build();
			}
			System.out.println("INVITEUSER");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void useInvite(Daoliberate.UseInviteRequest request, StreamObserver<Daoliberate.UseInviteResponse> responseObserver) {

		// UseInviteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.UseInviteResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.UseInviteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.UseInviteResponse.newBuilder().setStatus(Daoliberate.STATUS.NAME_EXISTS).build();
			System.out.println("NAME_EXISTS");
		}
		else if(!this.data_base.verifyInvite(request.getInvite(), request.getSignedInvite())) {
			response = Daoliberate.UseInviteResponse.newBuilder().setStatus(Daoliberate.STATUS.INVALID_INVITE).build();
			System.out.println("INVALID_INVITE");
		}
		else if(!this.data_base.useInvite(request.getRoomId(), request.getInvite())) {
			response = Daoliberate.UseInviteResponse.newBuilder().setStatus(Daoliberate.STATUS.DUPLICATE_INVITE).build();
			System.out.println("DUPLICATE_INVITE");
		}
		else {
			this.data_base.addUserToRoom(request.getPseudonym(), request.getPassword(), request.getRoomId());
			response = Daoliberate.UseInviteResponse.newBuilder()
						.setStatus(Daoliberate.STATUS.OK)
						.setRoomName(this.data_base.getRoomNameById(request.getRoomId()))
						.build();
			System.out.println("OK");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void createChannel(Daoliberate.CreateChannelRequest request, StreamObserver<Daoliberate.CreateChannelResponse> responseObserver) {

		// CreateChannelRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.CreateChannelResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.EXISTENT_CHANNEL).build();
			System.out.println("EXISTENT_CHANNEL");
		}
		else if(this.data_base.channelInVote(request.getRoomId(), request.getChannelName())){
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.createChannel(request.getRoomId(), request.getChannelName());
			this.data_base.logOnHistoryCreateChannel(request.getRoomId(), request.getChannelName(), request.getPseudonym());
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("CREATECHANNEL");
		}
		else {
			Vote vote = new VoteCreateChannel(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.CreateChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("CREATEMESSAGE_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void deleteChannel(Daoliberate.DeleteChannelRequest request, StreamObserver<Daoliberate.DeleteChannelResponse> responseObserver) {

		// DeleteChannelRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.DeleteChannelResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(this.data_base.channelInVote(request.getRoomId(), request.getChannelName())){
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.deleteChannel(request.getRoomId(), request.getChannelName());
			this.data_base.logOnHistoryDeleteChannel(request.getRoomId(), request.getChannelName(), request.getPseudonym());
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("DELETECHANNEL");
		}
		else {
			Vote vote = new VoteDeleteChannel(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.DeleteChannelResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("DELETECHANNEL_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void viewVotes(Daoliberate.ViewVotesRequest request, StreamObserver<Daoliberate.ViewVotesResponse> responseObserver) {

		// ViewVotesRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.ViewVotesResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.ViewVotesResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.ViewVotesResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.ViewVotesResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			List<String> votes = new ArrayList<String>();
			String vote_info;

			for(Vote vote : this.data_base.getVotesOfRoom(request.getRoomId())) {
				votes.add(vote.toString());
			}
			for(EqualVote vote : this.data_base.getEqualVotesOfRoom(request.getRoomId())) {
				votes.add(vote.toString());
			}
			response = Daoliberate.ViewVotesResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.addAllVotes(votes)
						.build();
			System.out.println("VIEW_VOTES");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void editVote(Daoliberate.EditVoteRequest request, StreamObserver<Daoliberate.EditVoteResponse> responseObserver) {

		// EditVoteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.EditVoteResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(!this.data_base.voteExists(request.getRoomId(), request.getVoteId())) {
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_VOTE).build();
			System.out.println("NONEXISTENT_VOTE");
		}
		else if(!this.data_base.getVoteInitiatorName(request.getRoomId(), request.getVoteId()).equals(request.getPseudonym())) {
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NOT_INITIATOR).build();
			System.out.println("NOT_INITIATOR");
		}
		else {
			this.data_base.editVote(request.getRoomId(), request.getVoteId(), request.getDescription());
			response = Daoliberate.EditVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("EDIT_VOTES");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void cancelVote(Daoliberate.CancelVoteRequest request, StreamObserver<Daoliberate.CancelVoteResponse> responseObserver) {

		// CancelVoteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.CancelVoteResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(!this.data_base.voteExists(request.getRoomId(), request.getVoteId())) {
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_VOTE).build();
			System.out.println("NONEXISTENT_VOTE");
		}
		else if(!this.data_base.getVoteInitiatorName(request.getRoomId(), request.getVoteId()).equals(request.getPseudonym())) {
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NOT_INITIATOR).build();
			System.out.println("NOT_INITIATOR");
		}
		else {
			this.data_base.cancelVote(request.getRoomId(), request.getVoteId());
			response = Daoliberate.CancelVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("CANCEL_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void vote(Daoliberate.VoteRequest request, StreamObserver<Daoliberate.VoteResponse> responseObserver) {

		// VoteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.VoteResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(!this.data_base.voteExists(request.getRoomId(), request.getVoteId())) {
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_VOTE).build();
			System.out.println("NONEXISTENT_VOTE");
		}
		else if(!this.data_base.eligibleVoter(request.getRoomId(), request.getVoteId(), request.getPseudonym())) {
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_VOTED).build();
			System.out.println("ALREADY_VOTED");
		}
		else {
			this.data_base.vote(request.getRoomId(), request.getVoteId(), request.getPseudonym(), request.getVote());
			response = Daoliberate.VoteResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void viewHistory(Daoliberate.ViewHistoryRequest request, StreamObserver<Daoliberate.ViewHistoryResponse> responseObserver) {

		// ViewHistoryRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.ViewHistoryResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.ViewHistoryResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.ViewHistoryResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.ViewHistoryResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			List<String> actions = new ArrayList<String>();

			for(String action : this.data_base.getActionsOfRoom(request.getRoomId())) {
				actions.add(action);
			}
			response = Daoliberate.ViewHistoryResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.addAllActions(actions)
						.build();
			System.out.println("VIEW_HISTORY");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void deleteMessage(Daoliberate.DeleteMessageRequest request, StreamObserver<Daoliberate.DeleteMessageResponse> responseObserver) {

		// DeleteMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.DeleteMessageResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.messageExists(request.getRoomId(), request.getChannelName(), request.getMessageId())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_MESSAGE).build();
			System.out.println("NONEXISTENT_MESSAGE");
		}
		else if(this.data_base.messageInVote(request.getRoomId(), request.getChannelName(), request.getMessageId())){
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(request.getReason() == Daoliberate.REASON.OWNER
		&& !this.data_base.getMessageOwnerName(request.getRoomId(), request.getChannelName(), request.getMessageId()).equals(request.getPseudonym())) {
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NOTOWNER_MESSAGE).build();
			System.out.println("NOTOWNER_MESSAGE");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1
			|| (request.getReason() == Daoliberate.REASON.OWNER
			   	&& this.data_base.getMessageOwnerName(request.getRoomId(), request.getChannelName(), request.getMessageId()).equals(request.getPseudonym()))
		){
			this.data_base.logOnHistoryDeleteMessage(request.getRoomId(), request.getChannelName(), request.getPseudonym(), request.getMessageId(), request.getReason());
			this.data_base.deleteMessage(request.getRoomId(), request.getChannelName(), request.getMessageId());
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("DELETEMESSAGE");
		}
		else {
			Vote vote = new VoteDeleteMessage(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName(), request.getMessageId(), request.getReason());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.DeleteMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("DELETEMESSAGE_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void viewPinnedMessages(Daoliberate.ViewPinnedMessagesRequest request, StreamObserver<Daoliberate.ViewPinnedMessagesResponse> responseObserver) {

		// ViewPinnedMessagesRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.ViewPinnedMessagesResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.ViewPinnedMessagesResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.ViewPinnedMessagesResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.ViewPinnedMessagesResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.ViewPinnedMessagesResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			List<Daoliberate.Message> pinned_messages = new ArrayList<Daoliberate.Message>();

			for(Message pinned_message : this.data_base.getPinnedMessagesOfChannel(request.getRoomId(), request.getChannelName())) {
				Daoliberate.Message message_proto = Daoliberate.Message.newBuilder()
				.setMessageId(pinned_message.getId())
				.setOwnerPseudonym(pinned_message.getOwner().getName())
				.setContent(pinned_message.getContent())
				.build();
				pinned_messages.add(message_proto);
			}
			response = Daoliberate.ViewPinnedMessagesResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.addAllPinnedMessages(pinned_messages)
						.build();
			System.out.println("VIEW_PINNED_MESSAGES");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void pinMessage(Daoliberate.PinMessageRequest request, StreamObserver<Daoliberate.PinMessageResponse> responseObserver) {

		// PinMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.PinMessageResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.messageExists(request.getRoomId(), request.getChannelName(), request.getMessageId())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_MESSAGE).build();
			System.out.println("NONEXISTENT_MESSAGE");
		}
		else if(this.data_base.messageInVote(request.getRoomId(), request.getChannelName(), request.getMessageId())){
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.logOnHistoryPinMessage(request.getRoomId(), request.getChannelName(), request.getPseudonym(), request.getMessageId());
			this.data_base.pinMessage(request.getRoomId(), request.getChannelName(), request.getMessageId());
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("PINMESSAGE");
		}
		else {
			Vote vote = new VotePinMessage(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName(), request.getMessageId());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.PinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("PINMESSAGE_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void unpinMessage(Daoliberate.UnpinMessageRequest request, StreamObserver<Daoliberate.UnpinMessageResponse> responseObserver) {

		// UnpinMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.UnpinMessageResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.messageExists(request.getRoomId(), request.getChannelName(), request.getMessageId())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_MESSAGE).build();
			System.out.println("NONEXISTENT_MESSAGE");
		}
		else if(!this.data_base.messagePinned(request.getRoomId(), request.getChannelName(), request.getMessageId())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.MESSAGE_NOT_PINNED).build();
			System.out.println("MESSAGE_NOT_PINNED");
		}
		else if(this.data_base.messageInVote(request.getRoomId(), request.getChannelName(), request.getMessageId())){
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.logOnHistoryUnpinMessage(request.getRoomId(), request.getChannelName(), request.getPseudonym(), request.getMessageId());
			this.data_base.unpinMessage(request.getRoomId(), request.getChannelName(), request.getMessageId());
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("UNPINMESSAGE");
		}
		else {
			Vote vote = new VoteUnpinMessage(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName(), request.getMessageId());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.UnpinMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("UNPINMESSAGE_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void deleteUser(Daoliberate.DeleteUserRequest request, StreamObserver<Daoliberate.DeleteUserResponse> responseObserver) {

		// DeleteUserRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.DeleteUserResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getName())) {
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_THIRD_NAME).build();
			System.out.println("UNKNOWN_THIRD_NAME");
		}
		else if(this.data_base.userInVote(request.getRoomId(), request.getName())){
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else {
			Vote vote = new VoteDeleteUser(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), this.data_base.getUser(request.getRoomId(), request.getName()));
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.DeleteUserResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("DELETEUSER");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void editMessage(Daoliberate.EditMessageRequest request, StreamObserver<Daoliberate.EditMessageResponse> responseObserver) {

		// EditMessageRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.EditMessageResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.channelExists(request.getRoomId(), request.getChannelName())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_CHANNEL).build();
			System.out.println("NONEXISTENT_CHANNEL");
		}
		else if(!this.data_base.messageExists(request.getRoomId(), request.getChannelName(), request.getMessageId())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_MESSAGE).build();
			System.out.println("NONEXISTENT_MESSAGE");
		}
		else if(this.data_base.messageInVote(request.getRoomId(), request.getChannelName(), request.getMessageId())){
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(request.getReason() == Daoliberate.REASON.OWNER
		&& !this.data_base.getMessageOwnerName(request.getRoomId(), request.getChannelName(), request.getMessageId()).equals(request.getPseudonym())) {
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.NOTOWNER_MESSAGE).build();
			System.out.println("NOTOWNER_MESSAGE");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1
			|| (request.getReason() == Daoliberate.REASON.OWNER
			   	&& this.data_base.getMessageOwnerName(request.getRoomId(), request.getChannelName(), request.getMessageId()).equals(request.getPseudonym()))
		){
			this.data_base.logOnHistoryEditMessage(request.getRoomId(), request.getChannelName(), request.getPseudonym(), request.getMessageId(), request.getContent(), request.getReason());
			this.data_base.editMessage(request.getRoomId(), request.getChannelName(), request.getMessageId(), request.getPseudonym(), request.getContent());
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("EDITMESSAGE");
		}
		else {
			Vote vote = new VoteEditMessage(this.data_base.getRoom(request.getRoomId()), this.data_base.getUser(request.getRoomId(), request.getPseudonym()), request.getChannelName(), request.getMessageId(), request.getContent(), request.getReason());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.EditMessageResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("EDITMESSAGE_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void punishUser(Daoliberate.PunishUserRequest request, StreamObserver<Daoliberate.PunishUserResponse> responseObserver) {

		// PunishUserRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.PunishUserResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getName())) {
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_THIRD_NAME).build();
			System.out.println("UNKNOWN_THIRD_NAME");
		}
		else if(this.data_base.userInVote(request.getRoomId(), request.getName())){
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(request.getDays() == 0 && request.getHours() == 0 && request.getMinutes() == 0 && !this.data_base.isPunishedUser(request.getRoomId(), request.getName())) {
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_NOT_PUNISHED).build();
			System.out.println("USER_NOT_PUNISHED");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			User initiator = this.data_base.getUser(request.getRoomId(), request.getPseudonym());
			User username_punish = this.data_base.getUser(request.getRoomId(), request.getName());
			Vote vote = new VotePunishUser(this.data_base.getRoom(request.getRoomId()), initiator, username_punish, request.getDays(), request.getHours(), request.getMinutes());
			int vote_id = this.data_base.createVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.PunishUserResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("PUNISHUSER");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void thresholdVote(Daoliberate.ThresholdVoteRequest request, StreamObserver<Daoliberate.ThresholdVoteResponse> responseObserver) {

		// ThresholdVoteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.ThresholdVoteResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(request.getThreshold() < 0 || request.getThreshold() > 1) {
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.INVALID_THRESHOLD).build();
			System.out.println("INVALID_THRESHOLD");
		}
		else if(this.data_base.thresholdInVote(request.getRoomId(), request.getAction())){
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.logOnHistoryChangeThreshold(request.getRoomId(), request.getAction(), request.getThreshold());
			this.data_base.changeThreshold(request.getRoomId(), request.getAction(), request.getThreshold());
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("THRESHOLD_CHANGE");
		}
		else {
			User initiator = this.data_base.getUser(request.getRoomId(), request.getPseudonym());
			EqualVote vote = new VoteThreshold(this.data_base.getRoom(request.getRoomId()), initiator, request.getAction(), request.getThreshold());
			int vote_id = this.data_base.createEqualVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.ThresholdVoteResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("THRESHOLD_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void getThresholds(Daoliberate.GetThresholdsRequest request, StreamObserver<Daoliberate.GetThresholdsResponse> responseObserver) {

		// GetThresholdsRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.GetThresholdsResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.GetThresholdsResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.GetThresholdsResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.GetThresholdsResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			Thresholds thresholds = this.data_base.getThresholds(request.getRoomId());
			response = Daoliberate.GetThresholdsResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.setCreateChannel(thresholds.getCreateChannelThreshold())
						.setDeleteChannel(thresholds.getDeleteChannelThreshold())
						.setDeleteMessage(thresholds.getDeleteMessageThreshold())
						.setDeleteUser(thresholds.getDeleteUserThreshold())
						.setEditMessage(thresholds.getEditMessageThreshold())
						.setInviteUser(thresholds.getInviteUserThreshold())
						.setPinMessage(thresholds.getPinMessageThreshold())
						.setPunishUser(thresholds.getPunishUserThreshold())
						.setUnpinMessage(thresholds.getUnpinMessageThreshold())
						.build();
			System.out.println("GET_THRESHOLDS");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void getExperimentalInteractions(Daoliberate.GetExperimentalInteractionsRequest request, StreamObserver<Daoliberate.GetExperimentalInteractionsResponse> responseObserver) {

		// GetExperimentalInteractionsRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.GetExperimentalInteractionsResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.GetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.GetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.GetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			response = Daoliberate.GetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.setExperimentalInteractions(this.data_base.getExperimentalInteractions(request.getRoomId()))
						.build();
			System.out.println("GET_EXPERIMENTAL_INTERACTIONS");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void setExperimentalInteractions(Daoliberate.SetExperimentalInteractionsRequest request, StreamObserver<Daoliberate.SetExperimentalInteractionsResponse> responseObserver) {

		// SetExperimentalInteractionsRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.SetExperimentalInteractionsResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(request.getExperimentalInteractions() < 0) {
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.INVALID_EXPERIMENTAL_INTERACTIONS).build();
			System.out.println("INVALID_EXPERIMENTAL_INTERACTIONS");
		}
		else if(this.data_base.experimentalInteractionsInVote(request.getRoomId())){
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(this.data_base.isPunishedUser(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.USER_PUNISHED).build();
			System.out.println("USER_PUNISHED");
		}
		else if(this.data_base.numberParticipantsRoom(request.getRoomId()) == 1){
			this.data_base.logOnHistoryChangeExperimentalInteractions(request.getRoomId(), request.getExperimentalInteractions());
			this.data_base.changeExperimentalInteractions(request.getRoomId(), request.getExperimentalInteractions());
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.OK).build();
			System.out.println("EXPERIMENTAL_INTERACTIONS_CHANGE");
		}
		else {
			User initiator = this.data_base.getUser(request.getRoomId(), request.getPseudonym());
			EqualVote vote = new VoteExperimentalInteractions(this.data_base.getRoom(request.getRoomId()), initiator, request.getExperimentalInteractions());
			int vote_id = this.data_base.createEqualVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.SetExperimentalInteractionsResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("EXPERIMENTAL_INTERACTIONS_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void getReputation(Daoliberate.GetReputationRequest request, StreamObserver<Daoliberate.GetReputationResponse> responseObserver) {

		// GetReputationRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.GetReputationResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.GetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getName())) {
			response = Daoliberate.GetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_THIRD_NAME).build();
			System.out.println("UNKNOWN_THIRD_NAME");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.GetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.GetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else {
			response = Daoliberate.GetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.LOGGED)
						.setReputation(this.data_base.getReputation(request.getRoomId(), request.getName()))
						.build();
			System.out.println("GET_REPUTATION");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void setReputation(Daoliberate.SetReputationRequest request, StreamObserver<Daoliberate.SetReputationResponse> responseObserver) {

		// SetReputationRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Daoliberate.SetReputationResponse response;

		if(!this.data_base.roomExists(request.getRoomId())) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.NONEXISTENT_ROOM).build();
			System.out.println("NONEXISTENT_ROOM");
		}
		else if(request.getReputation() >= this.data_base.getReputation(request.getRoomId(), request.getName()) || request.getReputation() < 1) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.INVALID_REPUTATION).build();
			System.out.println("INVALID_REPUTATION");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getName())) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_THIRD_NAME).build();
			System.out.println("UNKNOWN_THIRD_NAME");
		}
		else if(this.data_base.reputationInVote(request.getRoomId(), request.getName())){
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.ALREADY_IN_VOTE).build();
			System.out.println("ALREADY_IN_VOTE");
		}
		else if(!this.data_base.nameExists(request.getRoomId(), request.getPseudonym())) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getPseudonym(), request.getPassword(), request.getRoomId())) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(request.getPseudonym().equals(request.getName())) {
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.OWN_REPUTATION).build();
			System.out.println("OWN_REPUTATION");
		}
		else {
			User initiator = this.data_base.getUser(request.getRoomId(), request.getPseudonym());
			EqualVote vote = new VoteReputation(this.data_base.getRoom(request.getRoomId()), initiator, request.getName(), request.getReputation());
			int vote_id = this.data_base.createEqualVote(request.getRoomId(), vote);
			this.data_base.vote(request.getRoomId(), vote_id, request.getPseudonym(), true);
			response = Daoliberate.SetReputationResponse.newBuilder().setStatus(Daoliberate.STATUS.VOTE).setVoteId(vote_id).build();
			System.out.println("REPUTATION_VOTE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

}
