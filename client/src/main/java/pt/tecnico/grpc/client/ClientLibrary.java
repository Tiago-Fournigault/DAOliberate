package pt.tecnico.grpc.client;

/* these imported classes are generated by the server-contract and register-contract */
import pt.tecnico.grpc.Daoliberate;
import pt.tecnico.grpc.DaoliberateServiceGrpc;
import pt.tecnico.grpc.Register;
import pt.tecnico.grpc.RegisterServiceGrpc;
import pt.tecnico.grpc.security.*;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;
import io.grpc.netty.GrpcSslContexts;
import io.grpc.netty.NettyChannelBuilder;
import io.netty.handler.ssl.SslContext;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import javax.net.ssl.SSLException;
import java.io.File;

import java.math.BigDecimal;
import java.math.RoundingMode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;
import java.util.Scanner;

/**
 * The ClientLibrary class is responsible for communications between
 * the client application and the Daoliberate and Register servers.
 */
public class ClientLibrary {

	private String dao_host;
	private int dao_port;
	private String dao_target;
	private String register_host;
	private int register_port;
	private String register_target;
	private SslContext sslContext;
	private ManagedChannel channel;
	private DaoliberateServiceGrpc.DaoliberateServiceBlockingStub dao_stub;
	private RegisterServiceGrpc.RegisterServiceBlockingStub reg_stub;

	private AccountInfo account;
	private String account_object_filename;
	private String encry_password;

	public ClientLibrary(String dao_host, int dao_port, String register_host, int register_port) throws Exception {
		this.dao_host = dao_host;
		this.dao_port = dao_port;
        this.dao_target = dao_host + ":" + dao_port;
		this.register_host = register_host;
		this.register_port = register_port;
        this.register_target = register_host + ":" + register_port;
		this.sslContext = loadTLSCredentials();
	}

	public void getAccountInfo(String name, String password) throws Exception {
		this.account_object_filename = name;
		this.encry_password = password;
		
		File f = new File(this.account_object_filename);
		if (f.exists()) {
			try {
				this.account = (AccountInfo) LibSecurity.readObjectEncrypted(this.account_object_filename, this.encry_password);
			}
			catch (Exception e) {
				e.printStackTrace();
				this.account = new AccountInfo();
				this.updateAccountDataBase();
			}
		}
		else {
			this.account = new AccountInfo();
			this.updateAccountDataBase();
		}
	}

	private void updateAccountDataBase() {

		try {
			LibSecurity.writeObjectEncrypted(this.account, this.account_object_filename, this.encry_password);
		} catch (Exception e) {
			System.out.println("[ERROR] Could not update account data base. Error: " + e.getMessage());
		}
	}

	public void daoConnect() {
        this.channel = NettyChannelBuilder.forTarget(this.dao_target).sslContext(this.sslContext).build();
        this.dao_stub = DaoliberateServiceGrpc.newBlockingStub(channel);
    }
	public void regConnect() {
        this.channel = NettyChannelBuilder.forTarget(this.register_target).sslContext(this.sslContext).build();
		this.reg_stub = RegisterServiceGrpc.newBlockingStub(channel);
    }

	public void shutdownNow() {
        if(this.channel != null) {
            this.channel.shutdownNow();
        }
    }

	public boolean checkRoomAccess(int room_id) {
		return this.account.checkRoomAccess(room_id);
	}

	public List<String> getRooms() {
		return this.account.listRooms();
	}

	public String getString(Register.STATUS status){
		String message = "";
		switch(status) {
			case LOGGED:
				message = "Successfully logged in.";
				break;
			case SIGNED:
				message = "Successfully signed up.";
				break;
			case INITIAL_TICKETS_ERROR:
				message = "The number of initial users in the chat room must be greater than 0.";
				break;
			case UNKNOWN_NAME:
				message = "There is no user with that name.";
				break;
			case UNKNOWN_THIRD_NAME:
				message = "There is no user named ";
				break;
			case WRONG_PASSWORD:
				message = "Incorrect password.";
				break;
			case NAME_EXISTS:
				message = "The name entered is already assigned.";
				break;
			case WEAK_PASSWORD:
				message = "The password entered is weak. Requires at least 10 characters, with at least one capital letter, one small and one number.";
				break;
			case NOT_INVITED:
				message = "You are not invited to this room.";
				break;
			case OK:
				message = "Operation performed successfully.";
				break;
			default:
				message = "An unexpected error occurred.";
				break;
		}
		return message;
	}

	public String getString(Daoliberate.STATUS status){
		String message = "";
		switch(status) {
			case LOGGED:
				message = "Successfully logged in.";
				break;
			case UNKNOWN_NAME:
				message = "There is no user with that name.";
				break;
			case UNKNOWN_THIRD_NAME:
				message = "There is no user named ";
				break;
			case WRONG_PASSWORD:
				message = "Incorrect password.";
				break;
			case NAME_EXISTS:
				message = "The name entered is already assigned.";
				break;
			case ACCESS_ROOM_DENIED:
				message = "You are not allowed to access this room.";
				break;
			case WRONG_TICKET:
				message = "The temporary initial secret is wrong or has expired.";
				break;
			case NONEXISTENT_ROOM:
				message = "There is no room with that id.";
				break;
			case NONEXISTENT_CHANNEL:
				message = "There is no channel with that name.";
				break;
			case NONEXISTENT_VOTE:
				message = "There is no open voting process with this id.";
				break;
			case ALREADY_VOTED:
				message = "You have already voted for this process or you do not have permission to vote for it.";
				break;
			case NOT_INITIATOR:
				message = "You are not the initiator of this voting process.";
				break;
			case EXISTENT_CHANNEL:
				message = "There is a channel that already has that name.";
				break;
			case NONEXISTENT_MESSAGE:
				message = "There is no message with that id in this text channel.";
				break;
			case NOTOWNER_MESSAGE:
				message = "You are not the creator of this message.";
				break;
			case MESSAGE_NOT_PINNED:
				message = "This message is not pinned.";
				break;
			case INVALID_INVITE:
				message = "Invalid invitation, try again.";
				break;
			case ALREADY_INVITED:
				message = "User has already been invited to the room.";
				break;
			case DUPLICATE_INVITE:
				message = "Invitation already used, please try again.";
				break;
			case USER_PUNISHED:
				message = "You cannot perform this action because you are currently punished. Try again later.";
				break;
			case USER_NOT_PUNISHED:
				message = "You cannot perform this action because this user is currently not punished.";
				break;
			case INVALID_THRESHOLD:
				message = "The threshold must be a value between 0 and 1.";
				break;
			case INVALID_EXPERIMENTAL_INTERACTIONS:
				message = "The \"experimental interactions\" must be a value greater than 0.";
				break;
			case INVALID_REPUTATION:
				message = "The reputation must be a value greater than 1 and less than the user's current reputation.";
				break;
			case OWN_REPUTATION:
				message = "You cannot change your own reputation.";
				break;
			case OK:
				message = "Operation performed successfully.";
				break;
			case VOTE:
				message = "The intended task was put to a vote.";
				break;
			case ALREADY_IN_VOTE:
				message = "This action is already in the voting phase.";
				break;
			default:
				message = "An unexpected error occurred.";
				break;
		}
		return message;
	}

	public String pingDao() {
		daoConnect();
		Daoliberate.PingRequest request = Daoliberate.PingRequest.newBuilder()
		.setMessage("PING")
		.build();

		String response;
		try{
			Daoliberate.PingResponse ping = this.dao_stub.ping(request);
			response = ping.getMessage();
		}
		catch(StatusRuntimeException e){
			response = "Unable to access the Chat server. Try later.";
		}
		finally{
			shutdownNow();
		}

		return response;
	}

	public String pingRegister() {
		regConnect();
		Register.PingRequest request = Register.PingRequest.newBuilder()
		.setMessage("PING")
		.build();

		String response;
		try{
			Register.PingResponse ping = this.reg_stub.ping(request);
			response = ping.getMessage();
		}
		catch(StatusRuntimeException e){
			response = "Unable to access the Register server. Try later.";
		}
		finally{
			shutdownNow();
		}

		return response;
	}

	public boolean login(String name, String password) {
		regConnect();
		Register.LoginRequest request = Register.LoginRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.build();

		boolean success = false;
		try {
			Register.LoginResponse login = this.reg_stub.login(request);
			System.out.println(getString(login.getStatus()));
			System.out.println("");
			if(login.getStatus() == Register.STATUS.LOGGED) {
				success = true;
			}
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return success;
	}

	public boolean signup(String name, String password) {
		regConnect();
		Register.SignupRequest request = Register.SignupRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.build();

		boolean success = false;
		try{
			Register.SignupResponse signup = this.reg_stub.signup(request);
			System.out.println(getString(signup.getStatus()));
			System.out.println("");
			if(signup.getStatus() == Register.STATUS.SIGNED) {
				success = true;
			}
		}
		catch(StatusRuntimeException e){
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally{
			shutdownNow();
		}

		return success;
	}

	public void createRoom(String name, String password, String room_name, String[] initial_users) {
		regConnect();
		Register.CreateRoomRequest request = Register.CreateRoomRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.setRoomName(room_name)
		.addAllInitialUsers(new ArrayList<String>(Arrays.asList(initial_users)))
		.build();

		boolean response = false;
		Register.CreateRoomResponse createRoom = null;
		try {
			createRoom = this.reg_stub.createRoom(request);
			if(createRoom.getStatus() == Register.STATUS.OK) {
				response = true;
				System.out.println("Chat room successfully created (room id: " + createRoom.getRoomId() + ").");
			}
			else if(createRoom.getStatus() == Register.STATUS.UNKNOWN_THIRD_NAME) {
				for(int i = 0; i < createRoom.getNamesCount(); i++) {
					System.out.println(getString(createRoom.getStatus()) + createRoom.getNames(i) + ".");
				}
				System.out.println("Try again with the correct usernames.");
			}
			else {
				System.out.println(getString(createRoom.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		if(response) {
			Daoliberate.STATUS status = null;
			String pseudonym = "";
			Scanner scanner = new Scanner(System.in);
			do {
				System.out.print("Insert the pseudonym to be used in this room: ");
				pseudonym  = scanner.nextLine();
				status = ingressRoom(createRoom.getRoomId(), pseudonym, createRoom.getInitialSecret());
			} while(status == Daoliberate.STATUS.NAME_EXISTS);
		}
	}

	public String getInitialSecret(String name, String password, int room_id) {
		regConnect();
		Register.GetInitialSecretRequest request = Register.GetInitialSecretRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.setRoomId(room_id)
		.build();

		String secret = null;
		try {
			Register.GetInitialSecretResponse getInitialSecret = this.reg_stub.getInitialSecret(request);
			if(getInitialSecret.getStatus() == Register.STATUS.OK) {
				secret = getInitialSecret.getSecret();
			}
			else {
				System.out.println(getString(getInitialSecret.getStatus()));
				System.out.println("");
			}
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return secret;
	}

	public Daoliberate.STATUS ingressRoom(int room_id, String pseudonym, String secret) {
		String room_password = LibSecurity.getRandomSecret();
		daoConnect();
		Daoliberate.IngressRoomRequest request = Daoliberate.IngressRoomRequest.newBuilder()
		.setRoomId(room_id)
		.setInitialSecret(secret)
		.setPseudonym(pseudonym)
		.setPassword(room_password)
		.build();

		try {
			Daoliberate.IngressRoomResponse ingressRoom = this.dao_stub.ingressRoom(request);
			if(ingressRoom.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Successfully joined the chat room.");
				this.account.addInfo(room_id, ingressRoom.getRoomName(), pseudonym, room_password);
				this.updateAccountDataBase();
			}
			else {
				System.out.println(getString(ingressRoom.getStatus()));
			}
			System.out.println("");
			return ingressRoom.getStatus();
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return null;
	}

	public List<String> enterRoom(int room_id) {
		daoConnect();
		Daoliberate.EnterRoomRequest request = Daoliberate.EnterRoomRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.build();

		List<String> response = null;
		try {
			Daoliberate.EnterRoomResponse enterRoom = this.dao_stub.enterRoom(request);
			if(enterRoom.getStatus() == Daoliberate.STATUS.LOGGED) {
				BigDecimal dbDown = new BigDecimal(enterRoom.getReputation()).setScale(2, RoundingMode.DOWN);
				response = new ArrayList<String>();
				response.add("===== Room: " + enterRoom.getRoomName() + " | User: " + this.account.getPseudonym(room_id) + " | Reputation: " + dbDown.doubleValue() + " =====");
				response.add("Channels:");
				for(int i = 0; i < enterRoom.getChannelNamesCount(); i++) {
					response.add("\t-> " + enterRoom.getChannelNames(i));
				}

				if(enterRoom.getChannelNamesCount() == 0){
					response.add("\tNo channels for now.");
				}
			}
			else {
				System.out.println(getString(enterRoom.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public List<String> enterChannel(int room_id, String channel_name) {
		daoConnect();
		Daoliberate.EnterChannelRequest request = Daoliberate.EnterChannelRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.build();

		List<String> response = null;
		try {
			Daoliberate.EnterChannelResponse enterChannel = this.dao_stub.enterChannel(request);
			if(enterChannel.getStatus() == Daoliberate.STATUS.LOGGED) {
				response = new ArrayList<String>();
				response.add("===== Channel: " + channel_name + " =====");
				response.add("Chat messages:");
				for(int i = 0; i < enterChannel.getMessagesCount(); i++) {
					response.add("Message (id: " + enterChannel.getMessages(i).getMessageId() + ") from " + 
					enterChannel.getMessages(i).getOwnerPseudonym() + 
					(enterChannel.getMessages(i).getEditorPseudonym().equals("") ? "" : (" (Edited by: " + enterChannel.getMessages(i).getEditorPseudonym() + ")")) +
					":\n\t" + enterChannel.getMessages(i).getContent());
				}

				if(enterChannel.getMessagesCount() == 0){
					response.add("\tNo messages for now.");
				}
			}
			else {
				System.out.println(getString(enterChannel.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public void createMessage(int room_id, String channel_name, String content) {
		daoConnect();
		Daoliberate.CreateMessageRequest request = Daoliberate.CreateMessageRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.setContent(content)
		.build();

		try {
			Daoliberate.CreateMessageResponse createMessage = this.dao_stub.createMessage(request);
			if(createMessage.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Message sent successfully.");
			}
			else {
				System.out.println(getString(createMessage.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void inviteUser(int room_id, String name) {
		daoConnect();
		Daoliberate.InviteUserRequest request = Daoliberate.InviteUserRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setName(name)
		.build();

		try {
			Daoliberate.InviteUserResponse inviteUser = this.dao_stub.inviteUser(request);
			if(inviteUser.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Invitation to " + name + " sent successfully.");
			}
			else if(inviteUser.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Invitation of user \"" + name + "\" submitted for voting (voting process with id " + inviteUser.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(inviteUser.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void deleteUser(int room_id, String name) {
		daoConnect();
		Daoliberate.DeleteUserRequest request = Daoliberate.DeleteUserRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setName(name)
		.build();

		try {
			Daoliberate.DeleteUserResponse deleteUser = this.dao_stub.deleteUser(request);
			if(deleteUser.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Deletion of user \"" + name + "\" successfully completed.");
			}
			else if(deleteUser.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Deletion of user \"" + name + "\" submitted for voting (voting process with id " + deleteUser.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else if(deleteUser.getStatus() == Daoliberate.STATUS.UNKNOWN_THIRD_NAME) {
				System.out.println(getString(deleteUser.getStatus()) + "\"" + name + "\".");
			}
			else {
				System.out.println(getString(deleteUser.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public List<String> checkSecrets(String name, String password) {
		regConnect();
		Register.CheckSecretsRequest request = Register.CheckSecretsRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.build();

		List<String> response = null;
		try {
			Register.CheckSecretsResponse checkSecrets = this.reg_stub.checkSecrets(request);
			if(checkSecrets.getStatus() == Register.STATUS.OK) {
				response = new ArrayList<String>();
				response.add("Your initial secrets:");
				for(int i = 0; i < checkSecrets.getRoomIdsCount(); i++) {
					response.add("\tInitial secret to room \"" + checkSecrets.getRoomNames(i) + "\" (room id: " +
						checkSecrets.getRoomIds(i) + ").");
				}

				if(checkSecrets.getRoomIdsCount() == 0){
					response.add("\tNo initial secrets for now.");
				}
			}
			else {
				System.out.println(getString(checkSecrets.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public List<String> checkInvites(String name, String password) {
		regConnect();
		Register.CheckInvitesRequest request = Register.CheckInvitesRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.build();

		List<String> response = null;
		try {
			Register.CheckInvitesResponse checkInvites = this.reg_stub.checkInvites(request);
			if(checkInvites.getStatus() == Register.STATUS.OK) {
				response = new ArrayList<String>();
				response.add("Your invites:");
				for(int i = 0; i < checkInvites.getRoomIdsCount(); i++) {
					response.add("\tInvite to room \"" + checkInvites.getRoomNames(i) + "\" (room id: " +
						checkInvites.getRoomIds(i) + ").");
				}

				if(checkInvites.getRoomIdsCount() == 0){
					response.add("\tNo invites for now.");
				}
			}
			else {
				System.out.println(getString(checkInvites.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public Invite getInvite(String name, String password, int room_id) {
		regConnect();
		Register.GetInviteRequest reg_request = Register.GetInviteRequest.newBuilder()
		.setName(name)
		.setPassword(password)
		.setRoomId(room_id)
		.build();

		boolean response = false;
		Register.GetInviteResponse getInvite = null;
		try {
			getInvite = this.reg_stub.getInvite(reg_request);
			if(getInvite.getStatus() == Register.STATUS.OK) {
				response = true;
			}
			else {
				System.out.println(getString(getInvite.getStatus()));
				System.out.println("");
			}
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Register server. Try later.");
		}
		finally {
			shutdownNow();
		}

		if(!response) {
			return null;
		}

		return new Invite(getInvite.getInvite(), getInvite.getSignedInvite());
	}

	public Daoliberate.STATUS useInvite(Invite invite, int room_id, String pseudonym) {
		String room_password = LibSecurity.getRandomSecret();
		daoConnect();
		Daoliberate.UseInviteRequest dao_request = Daoliberate.UseInviteRequest.newBuilder()
		.setRoomId(room_id)
		.setInvite(invite.getInvite())
		.setSignedInvite(invite.getSignedInvite())
		.setPseudonym(pseudonym)
		.setPassword(room_password)
		.build();

		try {
			Daoliberate.UseInviteResponse useInvite = this.dao_stub.useInvite(dao_request);
			if(useInvite.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Successfully joined the chat room.");
				this.account.addInfo(room_id, useInvite.getRoomName(), pseudonym, room_password);
				this.updateAccountDataBase();
			}
			else {
				System.out.println(getString(useInvite.getStatus()));
			}
			System.out.println("");
			return useInvite.getStatus();
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return null;
	}

	public void createChannel(int room_id, String channel_name) {
		daoConnect();
		Daoliberate.CreateChannelRequest request = Daoliberate.CreateChannelRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.build();

		try {
			Daoliberate.CreateChannelResponse createChannel = this.dao_stub.createChannel(request);
			if(createChannel.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Channel created successfully.");
			}
			else if(createChannel.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Creation of a new channel submitted for voting (voting process with id " + createChannel.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(createChannel.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void deleteChannel(int room_id, String channel_name) {
		daoConnect();
		Daoliberate.DeleteChannelRequest request = Daoliberate.DeleteChannelRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.build();

		try {
			Daoliberate.DeleteChannelResponse deleteChannel = this.dao_stub.deleteChannel(request);
			if(deleteChannel.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Channel deleted successfully.");
			}
			else if(deleteChannel.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Deletion of channel submitted for voting (voting process with id " + deleteChannel.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(deleteChannel.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public List<String> viewVotes(int room_id) {
		daoConnect();
		Daoliberate.ViewVotesRequest request = Daoliberate.ViewVotesRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.build();

		List<String> response = null;
		try {
			Daoliberate.ViewVotesResponse viewVotes = this.dao_stub.viewVotes(request);
			if(viewVotes.getStatus() == Daoliberate.STATUS.LOGGED) {
				response = new ArrayList<String>();
				response.add("===== Open voting processes: =====");
				for(int i = 0; i < viewVotes.getVotesCount(); i++) {
					response.add(viewVotes.getVotes(i));
				}

				if(viewVotes.getVotesCount() == 0){
					response.add("\tThere are no open voting processes.");
				}
			}
			else {
				System.out.println(getString(viewVotes.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public void editVote(int room_id, int vote_id, String response) {
		daoConnect();
		Daoliberate.EditVoteRequest request = Daoliberate.EditVoteRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setVoteId(vote_id)
		.setDescription(response)
		.build();

		try {
			Daoliberate.EditVoteResponse editVote = this.dao_stub.editVote(request);
			if(editVote.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Vote description changed successfully.");
			}
			else {
				System.out.println(getString(editVote.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void cancelVote(int room_id, int vote_id) {
		daoConnect();
		Daoliberate.CancelVoteRequest request = Daoliberate.CancelVoteRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setVoteId(vote_id)
		.build();

		try {
			Daoliberate.CancelVoteResponse cancelVote = this.dao_stub.cancelVote(request);
			if(cancelVote.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Voting process cancelled.");
			}
			else {
				System.out.println(getString(cancelVote.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void vote(int room_id, int vote_id, boolean choice) {
		daoConnect();
		Daoliberate.VoteRequest request = Daoliberate.VoteRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setVoteId(vote_id)
		.setVote(choice)
		.build();

		try {
			Daoliberate.VoteResponse vote = this.dao_stub.vote(request);
			if(vote.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Vote submitted successfully.");
			}
			else {
				System.out.println(getString(vote.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public List<String> viewHistory(int room_id) {
		daoConnect();
		Daoliberate.ViewHistoryRequest request = Daoliberate.ViewHistoryRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.build();

		List<String> response = null;
		try {
			Daoliberate.ViewHistoryResponse viewHistory = this.dao_stub.viewHistory(request);
			if(viewHistory.getStatus() == Daoliberate.STATUS.LOGGED) {
				response = new ArrayList<String>();
				response.add("===== History of actions: =====");
				for(int i = 0; i < viewHistory.getActionsCount(); i++) {
					response.add(viewHistory.getActions(i));
				}

				if(viewHistory.getActionsCount() == 0){
					response.add("\tNo actions have yet been taken.");
				}
			}
			else {
				System.out.println(getString(viewHistory.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public void deleteMessage(int room_id, String channel_name, int message_id, Daoliberate.REASON reason) {
		daoConnect();
		Daoliberate.DeleteMessageRequest request = Daoliberate.DeleteMessageRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.setMessageId(message_id)
		.setReason(reason)
		.build();

		try {
			Daoliberate.DeleteMessageResponse deleteMessage = this.dao_stub.deleteMessage(request);
			if(deleteMessage.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Message deleted successfully.");
			}
			else if(deleteMessage.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Deletion of message submitted for voting (voting process with id " + deleteMessage.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(deleteMessage.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public List<String> viewPinnedMessages(int room_id, String channel_name) {
		daoConnect();
		Daoliberate.ViewPinnedMessagesRequest request = Daoliberate.ViewPinnedMessagesRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.build();

		List<String> response = null;
		try {
			Daoliberate.ViewPinnedMessagesResponse viewPinnedMessages = this.dao_stub.viewPinnedMessages(request);
			if(viewPinnedMessages.getStatus() == Daoliberate.STATUS.LOGGED) {
				response = new ArrayList<String>();
				response.add("===== Pinned messages on channel \"" + channel_name + "\": =====");
				for(int i = 0; i < viewPinnedMessages.getPinnedMessagesCount(); i++) {
					response.add("Message (id: " + viewPinnedMessages.getPinnedMessages(i).getMessageId() + ") from " + 
					viewPinnedMessages.getPinnedMessages(i).getOwnerPseudonym() + ":\n\t" + viewPinnedMessages.getPinnedMessages(i).getContent());
				}

				if(viewPinnedMessages.getPinnedMessagesCount() == 0){
					response.add("\tNo messages have been pinned for now.");
				}
			}
			else {
				System.out.println(getString(viewPinnedMessages.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public void pinMessage(int room_id, String channel_name, int message_id) {
		daoConnect();
		Daoliberate.PinMessageRequest request = Daoliberate.PinMessageRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.setMessageId(message_id)
		.build();

		try {
			Daoliberate.PinMessageResponse pinMessage = this.dao_stub.pinMessage(request);
			if(pinMessage.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Message pinned successfully.");
			}
			else if(pinMessage.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Message pin submitted for voting (voting process with id " + pinMessage.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(pinMessage.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void unpinMessage(int room_id, String channel_name, int message_id) {
		daoConnect();
		Daoliberate.UnpinMessageRequest request = Daoliberate.UnpinMessageRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.setMessageId(message_id)
		.build();

		try {
			Daoliberate.UnpinMessageResponse unpinMessage = this.dao_stub.unpinMessage(request);
			if(unpinMessage.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Message unpinned successfully.");
			}
			else if(unpinMessage.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Message unpin submitted for voting (voting process with id " + unpinMessage.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(unpinMessage.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void editMessage(int room_id, String channel_name, int message_id, String content, Daoliberate.REASON reason) {
		daoConnect();
		Daoliberate.EditMessageRequest request = Daoliberate.EditMessageRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setChannelName(channel_name)
		.setMessageId(message_id)
		.setContent(content)
		.setReason(reason)
		.build();

		try {
			Daoliberate.EditMessageResponse editMessage = this.dao_stub.editMessage(request);
			if(editMessage.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Message edited successfully.");
			}
			else if(editMessage.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Editing the message submitted for voting (voting process with id " + editMessage.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(editMessage.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public void punishUser(int room_id, String name, int days, int hours, int minutes) {
		daoConnect();
		Daoliberate.PunishUserRequest request = Daoliberate.PunishUserRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setName(name)
		.setDays(days)
		.setHours(hours)
		.setMinutes(minutes)
		.build();

		try {
			Daoliberate.PunishUserResponse punishUser = this.dao_stub.punishUser(request);
			if(punishUser.getStatus() == Daoliberate.STATUS.OK) {
				if(days == 0 && hours == 0 && minutes == 0) {
					System.out.println("Unpunishment of user \"" + name + "\" successfully completed.");
				}
				else{
					System.out.println("Punishment of user \"" + name + "\" successfully completed.");
				}
			}
			else if(punishUser.getStatus() == Daoliberate.STATUS.VOTE) {
				if(days == 0 && hours == 0 && minutes == 0) {
					System.out.println("Unpunishment of user \"" + name + "\" submitted for voting (voting process with id " + punishUser.getVoteId() + ").");
				}
				else {
					System.out.println("Punishment of user \"" + name + "\" submitted for voting (voting process with id " + punishUser.getVoteId() + ").");
				}
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else if(punishUser.getStatus() == Daoliberate.STATUS.UNKNOWN_THIRD_NAME) {
				System.out.println(getString(punishUser.getStatus()) + "\"" + name + "\".");
			}
			else {
				System.out.println(getString(punishUser.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public HashMap<String, Double> getThresholds(int room_id) {
		daoConnect();
		Daoliberate.GetThresholdsRequest request = Daoliberate.GetThresholdsRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.build();

		HashMap<String, Double> response = null;
		try {
			Daoliberate.GetThresholdsResponse getThresholds = this.dao_stub.getThresholds(request);
			if(getThresholds.getStatus() == Daoliberate.STATUS.LOGGED) {
				response = new HashMap<String, Double>();
				response.put("Create_Channel", getThresholds.getCreateChannel());
				response.put("Delete_Channel", getThresholds.getDeleteChannel());
				response.put("Delete_Message", getThresholds.getDeleteMessage());
				response.put("Edit_Message", getThresholds.getEditMessage());
				response.put("Pin_Message", getThresholds.getPinMessage());
				response.put("Unpin_Message", getThresholds.getUnpinMessage());
				response.put("Invite_User", getThresholds.getInviteUser());
				response.put("Punish_User", getThresholds.getPunishUser());
				response.put("Delete_User", getThresholds.getDeleteUser());
			}
			else {
				System.out.println(getString(getThresholds.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
	}

	public void thresholdVote(int room_id, Daoliberate.ACTION action, double threshold) {
		daoConnect();
		Daoliberate.ThresholdVoteRequest request = Daoliberate.ThresholdVoteRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setAction(action)
		.setThreshold(threshold)
		.build();

		try {
			Daoliberate.ThresholdVoteResponse thresholdVote = this.dao_stub.thresholdVote(request);
			if(thresholdVote.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Threshold successfully changed.");
			}
			else if(thresholdVote.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Threshold change submitted for voting (voting process with id " + thresholdVote.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(thresholdVote.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public boolean getExperimentalInteractions(int room_id) {
		daoConnect();
		Daoliberate.GetExperimentalInteractionsRequest request = Daoliberate.GetExperimentalInteractionsRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.build();

		boolean success = false;
		try {
			Daoliberate.GetExperimentalInteractionsResponse getExperimentalInteractions = this.dao_stub.getExperimentalInteractions(request);
			if(getExperimentalInteractions.getStatus() == Daoliberate.STATUS.LOGGED) {
				System.out.println("Enter the new value (currently, \"experimental interactions\" = " + getExperimentalInteractions.getExperimentalInteractions() + "): ");
				success = true;
			}
			else {
				System.out.println(getString(getExperimentalInteractions.getStatus()));
				System.out.println("");
			}
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return success;
	}

	public boolean setExperimentalInteractions(int room_id, int new_value) {
		daoConnect();
		Daoliberate.SetExperimentalInteractionsRequest request = Daoliberate.SetExperimentalInteractionsRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setRoomId(room_id)
		.setExperimentalInteractions(new_value)
		.build();

		boolean success = false;
		try {
			Daoliberate.SetExperimentalInteractionsResponse setExperimentalInteractions = this.dao_stub.setExperimentalInteractions(request);
			if(setExperimentalInteractions.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Experimental interactions value successfully changed.");
			}
			else if(setExperimentalInteractions.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("Experimental interactions value change submitted for voting (voting process with id " + setExperimentalInteractions.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(setExperimentalInteractions.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return success;
	}

	public boolean getReputation(int room_id, String pseudonym) {
		daoConnect();
		Daoliberate.GetReputationRequest request = Daoliberate.GetReputationRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setName(pseudonym)
		.setRoomId(room_id)
		.build();

		boolean success = false;
		try {
			Daoliberate.GetReputationResponse getReputation = this.dao_stub.getReputation(request);
			if(getReputation.getStatus() == Daoliberate.STATUS.LOGGED) {
				System.out.println("Currently, reputation of \"" + pseudonym + "\" = " + getReputation.getReputation());
				System.out.println("Enter new value for reputation (less than " + getReputation.getReputation() + " and greater than or equal to 1): ");
				success = true;
			}
			else {
				System.out.println(getString(getReputation.getStatus()));
				System.out.println("");
			}
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return success;
	}

	public void setReputation(int room_id, String pseudonym, double new_value) {
		daoConnect();
		Daoliberate.SetReputationRequest request = Daoliberate.SetReputationRequest.newBuilder()
		.setPseudonym(this.account.getPseudonym(room_id))
		.setPassword(this.account.getPassword(room_id))
		.setName(pseudonym)
		.setRoomId(room_id)
		.setReputation(new_value)
		.build();

		try {
			Daoliberate.SetReputationResponse setReputation = this.dao_stub.setReputation(request);
			if(setReputation.getStatus() == Daoliberate.STATUS.OK) {
				System.out.println("Reputation of \"" + pseudonym + "\" successfully changed.");
			}
			else if(setReputation.getStatus() == Daoliberate.STATUS.VOTE) {
				System.out.println("New reputation of \"" + pseudonym + "\" submitted for voting (voting process with id " + setReputation.getVoteId() + ").");
				System.out.println("You can add a description to the voting process in order to justify the action.");
			}
			else {
				System.out.println(getString(setReputation.getStatus()));
			}
			System.out.println("");
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}
	}

	public SslContext loadTLSCredentials() throws SSLException {
		File serverCACertFile = new File("../cert/ca-cert.pem");
		File clientCertFile = new File("../cert/client-cert.pem");
		File clientKeyFile = new File("../cert/client-key.pem");

		return GrpcSslContexts.forClient()
			.keyManager(clientCertFile, clientKeyFile)
			.trustManager(serverCACertFile)
			.build();
	}
}
