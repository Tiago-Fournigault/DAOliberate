package pt.tecnico.grpc.register;

/* these imported classes are generated by the register-contract */
import pt.tecnico.grpc.Register;
import pt.tecnico.grpc.RegisterServiceGrpc;

import io.grpc.stub.StreamObserver;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/**
 * The RegisterServiceImpl class represents the server-side implementation of the Register service.
 */
public class RegisterServiceImpl extends RegisterServiceGrpc.RegisterServiceImplBase {

	private Database data_base;
	private RegisterLibrary library;

	public RegisterServiceImpl(Database data_base, String server_host, int server_port) throws Exception {
		this.data_base = data_base;
		this.library = new RegisterLibrary(server_host, server_port);
	}

	@Override
	public void ping(Register.PingRequest request, StreamObserver<Register.PingResponse> responseObserver) {

		// PingRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.PingResponse response = Register.PingResponse.newBuilder()
				.setMessage("Register server is up!").build();

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void login(Register.LoginRequest request, StreamObserver<Register.LoginResponse> responseObserver) {

		// LoginRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.LoginResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.LoginResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(this.data_base.checkLogin(request.getName(), request.getPassword())) {
			response = Register.LoginResponse.newBuilder().setStatus(Register.STATUS.LOGGED).build();
			System.out.println("LOGGED");
		}
		else {
			response = Register.LoginResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void signup(Register.SignupRequest request, StreamObserver<Register.SignupResponse> responseObserver) {

		// SignupRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.SignupResponse response;

		if(this.data_base.checkNameExists(request.getName())) {
			response = Register.SignupResponse.newBuilder().setStatus(Register.STATUS.NAME_EXISTS).build();
			System.out.println("NAME_EXISTS");
		}
		else if(!this.data_base.checkPasswordFormat(request.getPassword())) {
			response = Register.SignupResponse.newBuilder().setStatus(Register.STATUS.WEAK_PASSWORD).build();
			System.out.println("WEAK_PASSWORD");
		}
		else if(this.data_base.addUser(request.getName(), request.getPassword())) {
			response = Register.SignupResponse.newBuilder().setStatus(Register.STATUS.SIGNED).build();
			System.out.println("SIGNED");
		}
		else {
			response = Register.SignupResponse.newBuilder().setStatus(Register.STATUS.ERROR).build();
			System.out.println("ERROR");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void createRoom(Register.CreateRoomRequest request, StreamObserver<Register.CreateRoomResponse> responseObserver) {

		// CreateRoomRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.CreateRoomResponse response;

		int initial_tickets = request.getInitialUsersCount() + 1;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.CreateRoomResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(this.data_base.checkLogin(request.getName(), request.getPassword())) {
			if(!(initial_tickets > 0)) {
				response = Register.CreateRoomResponse.newBuilder().setStatus(Register.STATUS.INITIAL_TICKETS_ERROR).build();
				System.out.println("INITIAL_TICKETS_ERROR");
			}
			else{
				boolean exists = true;
				ArrayList<String> nonexistent_names = new ArrayList<String>();
				ArrayList<String> names = new ArrayList<String>();

				for(int i = 0; i < request.getInitialUsersCount() && exists; i++) {
					if(!this.data_base.checkNameExists(request.getInitialUsers(i))) {
						exists = false;
						if(!nonexistent_names.contains(request.getInitialUsers(i))) {
							nonexistent_names.add(request.getInitialUsers(i));
						}
					}
					else if(!names.contains(request.getInitialUsers(i)) && !request.getInitialUsers(i).equals(request.getName())) {
						names.add(request.getInitialUsers(i));
					}
				}

				if(!exists) {
					response = Register.CreateRoomResponse.newBuilder()
						.setStatus(Register.STATUS.UNKNOWN_THIRD_NAME)
						.addAllNames(nonexistent_names)
						.build();
					System.out.println("UNKNOWN_THIRD_NAME");
				}
				else {
					ArrayList<String> secrets = new ArrayList<String>();
					for(int i = 0; i <= names.size(); i++) {
						secrets.add(this.library.getInitialSecret());
					}
					int room_id = this.library.createRoom(request.getRoomName(), secrets);

					if(room_id != -1) {
						Random random = new Random();
						String owner_secret = secrets.remove(random.nextInt(secrets.size()));
						response = Register.CreateRoomResponse.newBuilder()
							.setStatus(Register.STATUS.OK)
							.setRoomId(room_id)
							.setInitialSecret(owner_secret)
							.build();

					
						//this.data_base.addInitialRoomSecret(request.getName(), room_id, request.getRoomName(), owner_secret);
						for(String name : names) {
							this.data_base.addInitialRoomSecret(name, room_id, request.getRoomName(), secrets.remove(random.nextInt(secrets.size())));
						}
						System.out.println("CREATEROOM");
					}
					else{
						response = Register.CreateRoomResponse.newBuilder().setStatus(Register.STATUS.ERROR).build();
						System.out.println("ERROR");
					}
				}
			}
		}
		else {
			response = Register.CreateRoomResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void checkSecrets(Register.CheckSecretsRequest request, StreamObserver<Register.CheckSecretsResponse> responseObserver) {

		// CheckSecretsRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.CheckSecretsResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.CheckSecretsResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(this.data_base.checkLogin(request.getName(), request.getPassword())) {
			List<Integer> room_ids = new ArrayList<Integer>();
			List<String> room_names = new ArrayList<String>();
			for(Room room : this.data_base.getUserSecrets(request.getName())) {
				room_ids.add(room.getId());
				room_names.add(room.getName());
			}
			response = Register.CheckSecretsResponse.newBuilder().setStatus(Register.STATUS.OK)
						.addAllRoomIds(room_ids)
						.addAllRoomNames(room_names)
						.build();
			System.out.println("CHECK_SECRETS");
		}
		else {
			response = Register.CheckSecretsResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void preInviteUser(Register.PreInviteUserRequest request, StreamObserver<Register.PreInviteUserResponse> responseObserver) {

		// PreInviteUserRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.PreInviteUserResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.PreInviteUserResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(this.data_base.hasInviteToRoom(request.getName(), request.getRoomId())
				|| this.data_base.hasSecretToRoom(request.getName(), request.getRoomId())
				|| this.data_base.hasRegisteredRoom(request.getName(), request.getRoomId())) {
			response = Register.PreInviteUserResponse.newBuilder().setStatus(Register.STATUS.ALREADY_INVITED).build();
			System.out.println("ALREADY_INVITED");
		}
		else if(!this.data_base.checkCounterInvite(request.getInvite())) {
			response = Register.PreInviteUserResponse.newBuilder().setStatus(Register.STATUS.DUPLICATE_INVITE).build();
			System.out.println("DUPLICATE_INVITE");
		}
		else if(!this.data_base.validateInvite(request.getInvite(), request.getSignedInvite())) {
			response = Register.PreInviteUserResponse.newBuilder().setStatus(Register.STATUS.INVALID_INVITE).build();
			System.out.println("INVALID_INVITE");
		}
		else {
			this.data_base.addInviteToRoom(request.getInvite(), request.getSignedInvite(), request.getRoomId());
			this.data_base.addPreInviteToUser(request.getName(), request.getRoomId(), request.getRoomName());
			response = Register.PreInviteUserResponse.newBuilder().setStatus(Register.STATUS.OK).build();
			System.out.println("PRE_INVITE_USER");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void inviteUser(Register.InviteUserRequest request, StreamObserver<Register.InviteUserResponse> responseObserver) {

		// InviteUserRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.InviteUserResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.InviteUserResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.hasPreInviteToRoom(request.getName(), request.getRoomId())) {
			response = Register.InviteUserResponse.newBuilder().setStatus(Register.STATUS.NOT_INVITED).build();
			System.out.println("NOT_INVITED");
		}
		else {
			this.data_base.addInviteToUser(request.getName(), request.getRoomId());
			response = Register.InviteUserResponse.newBuilder().setStatus(Register.STATUS.OK).build();
			System.out.println("INVITE_USER");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void checkInvites(Register.CheckInvitesRequest request, StreamObserver<Register.CheckInvitesResponse> responseObserver) {

		// CheckInvitesRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.CheckInvitesResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.CheckInvitesResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(this.data_base.checkLogin(request.getName(), request.getPassword())) {
			List<Integer> room_ids = new ArrayList<Integer>();
			List<String> room_names = new ArrayList<String>();
			for(Room room : this.data_base.getUserInvites(request.getName())) {
				room_ids.add(room.getId());
				room_names.add(room.getName());
			}
			response = Register.CheckInvitesResponse.newBuilder().setStatus(Register.STATUS.OK)
						.addAllRoomIds(room_ids)
						.addAllRoomNames(room_names)
						.build();
			System.out.println("CHECK_INVITES");
		}
		else {
			response = Register.CheckInvitesResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void getInvite(Register.GetInviteRequest request, StreamObserver<Register.GetInviteResponse> responseObserver) {

		// GetInviteRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.GetInviteResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.GetInviteResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getName(), request.getPassword())) {
			response = Register.GetInviteResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(!this.data_base.hasInviteToRoom(request.getName(), request.getRoomId())) {
			response = Register.GetInviteResponse.newBuilder().setStatus(Register.STATUS.NOT_INVITED).build();
			System.out.println("NOT_INVITED");
		}
		else {
			Invite invite = this.data_base.getRandomInvite(request.getRoomId(), request.getName());
			this.data_base.addRegisteredRoom(request.getName(), request.getRoomId());
			response = Register.GetInviteResponse.newBuilder()
						.setStatus(Register.STATUS.OK)
						.setInvite(invite.getInvite())
						.setSignedInvite(invite.getSignedInvite())
						.build();
			System.out.println("GET_INVITE");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void getInitialSecret(Register.GetInitialSecretRequest request, StreamObserver<Register.GetInitialSecretResponse> responseObserver) {

		// GetInitialSecretRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		Register.GetInitialSecretResponse response;

		if(!this.data_base.checkNameExists(request.getName())) {
			response = Register.GetInitialSecretResponse.newBuilder().setStatus(Register.STATUS.UNKNOWN_NAME).build();
			System.out.println("UNKNOWN_NAME");
		}
		else if(!this.data_base.checkLogin(request.getName(), request.getPassword())) {
			response = Register.GetInitialSecretResponse.newBuilder().setStatus(Register.STATUS.WRONG_PASSWORD).build();
			System.out.println("WRONG_PASSWORD");
		}
		else if(!this.data_base.hasSecretToRoom(request.getName(), request.getRoomId())) {
			response = Register.GetInitialSecretResponse.newBuilder().setStatus(Register.STATUS.NOT_INVITED).build();
			System.out.println("NOT_INVITED");
		}
		else {
			String secret = this.data_base.getInitialSecret(request.getRoomId(), request.getName());
			this.data_base.addRegisteredRoom(request.getName(), request.getRoomId());
			response = Register.GetInitialSecretResponse.newBuilder()
						.setStatus(Register.STATUS.OK)
						.setSecret(secret)
						.build();
			System.out.println("GET_INITAL_SECRET");
		}

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

}
