package pt.tecnico.grpc.register;

/* these imported classes are generated by the server-contract and register-contract */
import pt.tecnico.grpc.Daoliberate;
import pt.tecnico.grpc.DaoliberateServiceGrpc;
import pt.tecnico.grpc.Register;
import pt.tecnico.grpc.RegisterServiceGrpc;
import pt.tecnico.grpc.security.*;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;
import io.grpc.netty.GrpcSslContexts;
import io.grpc.netty.NettyChannelBuilder;
import io.netty.handler.ssl.SslContext;

import javax.net.ssl.SSLException;
import java.io.File;

import java.util.ArrayList;
import java.util.List;

/**
 * The RegisterLibrary class is responsible for communications between
 * the Register server and the Daoliberate server.
 */
public class RegisterLibrary {

	private String dao_host;
	private int dao_port;
	private String dao_target;
	private SslContext sslContext;
	private ManagedChannel channel;
	private DaoliberateServiceGrpc.DaoliberateServiceBlockingStub dao_stub;

	public RegisterLibrary(String dao_host, int dao_port) throws Exception {
		this.dao_host = dao_host;
		this.dao_port = dao_port;
        this.dao_target = dao_host + ":" + dao_port;
		this.sslContext = loadTLSCredentials();
	}

	public void daoConnect() {
        this.channel = NettyChannelBuilder.forTarget(this.dao_target).sslContext(this.sslContext).build();
        this.dao_stub = DaoliberateServiceGrpc.newBlockingStub(channel);
    }

	public void shutdownNow() {
        if(this.channel != null) {
            this.channel.shutdownNow();
        }
    }

    public String getInitialSecret() {
        return LibSecurity.getRandomSecret();
    }

    public int createRoom(String room_name, ArrayList<String> initial_secrets) {
        daoConnect();
		Daoliberate.CreateRoomRequest request = Daoliberate.CreateRoomRequest.newBuilder()
		.setRoomName(room_name)
        .addAllInitialSecrets(initial_secrets)
		.build();

		int response = -1;
		try {
			Daoliberate.CreateRoomResponse createRoom = this.dao_stub.createRoom(request);
			response = createRoom.getRoomId();
		}
		catch(StatusRuntimeException e) {
			System.out.println("Unable to access the Chat server. Try later.");
		}
		finally {
			shutdownNow();
		}

		return response;
    }

	public SslContext loadTLSCredentials() throws SSLException {
		File serverCACertFile = new File("../cert/ca-cert.pem");
		File clientCertFile = new File("../cert/register-cert.pem");
		File clientKeyFile = new File("../cert/register-key.pem");

		return GrpcSslContexts.forClient()
			.keyManager(clientCertFile, clientKeyFile)
			.trustManager(serverCACertFile)
			.build();
	}

}
